<Window x:Class="WPFSkeletonIDE.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:WPFSkeletonIDE.Views"
        xmlns:vm="clr-namespace:WPFSkeletonIDE.ViewModels"
        xmlns:vDocuments="clr-namespace:WPFSkeletonIDE.Views.Documents"
        xmlns:vPanes="clr-namespace:WPFSkeletonIDE.Views.Panes"
        xmlns:vmDocuments="clr-namespace:WPFSkeletonIDE.ViewModels.Documents"
        xmlns:vmPanes="clr-namespace:WPFSkeletonIDE.ViewModels.Panes"
        xmlns:avalonDock="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="Regular"
        TextElement.FontSize="13"
        TextOptions.TextFormattingMode="Ideal" 
        TextOptions.TextRenderingMode="Auto"        
        Background="{DynamicResource MaterialDesignPaper}"
        FontFamily="{DynamicResource MaterialDesignFont}"
        
        Title="MainWindow" Height="480" Width="640">
    
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    
    <i:Interaction.Triggers>
    
    	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <!-- ====================================================================== -->
    <!-- レイアウトルート -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- ======== メニュー ======== -->
        <Menu Grid.Row="0">
            <MenuItem Header="File" />
        </Menu>

        <!-- ======== ドッキングエリア ======== -->
        <avalonDock:DockingManager 
            x:Name="_dockingManager" Grid.Row="1" 
            DocumentsSource="{Binding DockingDocumentViewModels}"
            AnchorablesSource="{Binding DockingPaneViewModels}">
            
            <!--<avalonDock:DockingManager.Theme>
                
                <avalonDock:MetroTheme />
                
            </avalonDock:DockingManager.Theme>-->

            <!-- ======== LayoutItem コンテナ (ウィンドウやタブ) のスタイル ======== -->
            <avalonDock:DockingManager.LayoutItemContainerStyleSelector>
                <v:LayoutItemContainerStyleSelector>
                    <!-- Document のスタイル -->
                    <v:LayoutItemTypedStyle DataType="{x:Type vmDocuments:DocumentViewModelBase}">
                        <Style TargetType="{x:Type avalonDock:LayoutItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}" />
                        </Style>
                    </v:LayoutItemTypedStyle>
                    <!-- Pane のスタイル -->
                    <v:LayoutItemTypedStyle DataType="{x:Type vmPanes:PaneViewModelBase}">
                        <Style TargetType="{x:Type avalonDock:LayoutAnchorableItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}"/>
                        </Style>
                    </v:LayoutItemTypedStyle>
                </v:LayoutItemContainerStyleSelector>
            </avalonDock:DockingManager.LayoutItemContainerStyleSelector>

            <!-- ======== ウィンドウ内容のテンプレート ======== -->
            <avalonDock:DockingManager.LayoutItemTemplateSelector>
                <v:LayoutItemTemplateSelector>
                    <!-- [プロジェクト設定] Document -->
                    <DataTemplate DataType="{x:Type vmDocuments:ProjectSettingDocumentViewModel}">
                        <vDocuments:ProjectSettingDocument />
                    </DataTemplate>
                    <!-- [ソースコード] Document -->
                    <DataTemplate DataType="{x:Type vmDocuments:SourceFileDocumentViewModel}">
                        <vDocuments:SourceFileDocument />
                    </DataTemplate>
                    <!-- [エラー一覧] Pane -->
                    <DataTemplate DataType="{x:Type vmPanes:ErrorListPaneViewModel}">
                        <vPanes:ErrorListPane />
                    </DataTemplate>
                    <!-- [出力] Pane -->
                    <DataTemplate DataType="{x:Type vmPanes:OutputPaneViewModel}">
                        <vPanes:OutputPane />
                    </DataTemplate>
                    <!-- [プロパティ] Pane -->
                    <DataTemplate DataType="{x:Type vmPanes:PropertyPaneViewModel}">
                        <vPanes:PropertyPane />
                    </DataTemplate>
                    <!-- [ソリューション エクスプローラ] Pane -->
                    <DataTemplate DataType="{x:Type vmPanes:SolutionExplorerPaneViewModel}">
                        <vPanes:SolutionExplorerPane />
                    </DataTemplate>
                </v:LayoutItemTemplateSelector>
            </avalonDock:DockingManager.LayoutItemTemplateSelector>

            <!-- ======== デフォルトレイアウト ======== -->

            <!-- ContentId で識別される ViewModel を持つ LayoutAnchorable を、TargetLayoutName で識別される LayoutAnchorablePane に接続する -->
            <avalonDock:DockingManager.LayoutUpdateStrategy>
                <v:LayoutInitializer>
                    <v:LayoutInsertTarget ContentId="SolutionExplorerPaneViewModel" TargetLayoutName="LeftSideArea" />
                    <v:LayoutInsertTarget ContentId="PropertyPaneViewModel" TargetLayoutName="RightSideArea" />
                    <v:LayoutInsertTarget ContentId="ErrorListPaneViewModel" TargetLayoutName="BottomSideArea" />
                    <v:LayoutInsertTarget ContentId="OutputPaneViewModel" TargetLayoutName="BottomSideArea" />
                </v:LayoutInitializer>
            </avalonDock:DockingManager.LayoutUpdateStrategy>

            <!-- 初期レイアウト -->
            <avalonDock:LayoutRoot>
                <avalonDock:LayoutPanel Orientation="Horizontal">
                    <avalonDock:LayoutAnchorablePane DockWidth="150" Name="LeftSideArea" />
                    <avalonDock:LayoutPanel Orientation="Vertical" >
                        <avalonDock:LayoutPanel Orientation="Horizontal">
                            <avalonDock:LayoutDocumentPane />
                            <avalonDock:LayoutAnchorablePane DockWidth="150" Name="RightSideArea" />
                        </avalonDock:LayoutPanel>
                        <avalonDock:LayoutAnchorablePane DockHeight="150" Name="BottomSideArea" />
                    </avalonDock:LayoutPanel>
                </avalonDock:LayoutPanel>
            </avalonDock:LayoutRoot>

        </avalonDock:DockingManager>
    </Grid>
</Window>
